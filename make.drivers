#=======================================================================
# SYSTEM (compiler dependent) definitions:  
#=======================================================================
INC_FILE=make.inc
#-----------------------------------------------------------------------
# INC_FILE contains definitions for versions debug(G) and release(O)
# for each compiler. The following variables need to be defined:
#
#    * Fortran compiler and its options (FC,FFG,FFO) 
#    * Linker and its options (LINK,LFG,LFO)
#
# It also contains the option to define where to look for include 
# files ($I) and where to put fortran module files ($J).
#
#
# Make usage below:
# wildcard returns a space-separated list of the names of existing files 
# that match the pattern (INC_FILE in this case) and strip removes 
# leading and trailing whitespaces from string and replaces each internal 
# sequence of one or more whitespace characters with a single space.
#-----------------------------------------------------------------------
ifneq ($(strip $(wildcard $(INC_FILE))),)
include $(INC_FILE)
else
STATUS=ERROR
endif
#
#-----------------------------------------------------------------------
# Program libraries are defined here
#-----------------------------------------------------------------------
# The following lines depend on environment variables and variables defined
# in INC_FILE (and do not need to be changed)
O=$(COMPILER)/Objects_$(V)
INC=-$I$O
MOD=-$J$O
MAIN=$(NAME)
#
#-----------------------------------------------------------------------
# Define directories to search sources, modules and includes
SOURCE=../Sources
MODULES=../Sources
INCLUDES=../Sources
#
#-----------------------------------------------------------------------
# Define a space separated list of drivers to compile of each type
DRIVERS=hello_world fem2d_poisson_driver

#
DRIVERS_CONFIG=${addsuffix .obj,$(DRIVERS)} ${addsuffix .dep,$(DRIVERS)} 

#-----------------------------------------------------------------------
#
LIB_DIR=-L$(COMPILER) $(MKL_LIB_DIR) 
LIBSG_SEQ=$(LIB_DIR) $(MKL_LIB_SEQ)
LIBSO_SEQ=$(LIB_DIR) $(MKL_LIB_SEQ) 
LIBSG_THR=$(LIB_DIR) $(MKL_LIB_THREAD)
LIBSO_THR=$(LIB_DIR) $(MKL_LIB_THREAD) 
FCOMP=$(FC)
INC=-$I$(MKLROOT)/include -$I../Sources -$I$O 

#
#-----------------------------------------------------------------------
AUX_FILE=$(NAME)
DEP_FILE=$(AUX_FILE).dep
OBJ_FILE=$(AUX_FILE).obj
STATUS=OK
#
#-----------------------------------------------------------------------
# An automatically generated list of objects is included here, in OBJ_FILE
# which is generated by configuref90 and contains
#
# SOURCE_DIRS list of directories for search source files
# INC_DIRS    list of directories for search include files
# OFILES      list of compiled files required to generated executable 
#
ifneq ($(strip $(wildcard $(OBJ_FILE))),)
include $(OBJ_FILE)
endif
#
vpath %f ${SOURCE_DIRS}
vpath %f90 ${SOURCE_DIRS}
#
# An automatically generated  list of dependencies (also generated by
# configuref90) is included here, in DEP_FILE
#
ifneq ($(strip $(wildcard $(DEP_FILE))),)
include $(DEP_FILE)
endif
#=======================================================================
# USER accesible rules to build libraries and programs
#-----------------------------------------------------------------------
# Building rules (rules not involving any file should be declared as phony)
.PHONY: default all 
.PHONY: debug   debug_multithreaded debug_no_multithreaded  
.PHONY: release release_multithreaded release_no_multithreaded

default: debug

all: debug release

debug: debug_multithreaded debug_no_multithreaded

debug_multithreaded:  $(DRIVERS_CONFIG)
	@echo '---------------->>> BUILDING DRIVERS (DEBUG MULTITHREADED)      <<<-------------'
	@mkdir -p $(COMPILER)/Objects_gm
	@for i in $(DRIVERS); do make --no-print-directory -f make.drivers NAME=$$i  "V=gm" "FFLAGS=$(FFG) $(OMP) -DENABLE_OPENMP" "CL=$(CLG) $(OMP)" $(COMPILER)/$$i.gm ; done 
	@echo '----------------------------------------------------------------------'
	@echo '---------------->>> DRIVERS (DEBUG MULTITHREADED) READY         <<<-------------'

debug_no_multithreaded:  $(DRIVERS_CONFIG)
	@echo '---------------->>> BUILDING DRIVERS (DEBUG PAR)      <<<-------------'
	@mkdir -p $(COMPILER)/Objects_g
	@for i in $(DRIVERS); do make --no-print-directory -f make.drivers NAME=$$i  "V=g" "FFLAGS=$(FFG)" "CL=$(CLG)" $(COMPILER)/$$i.g ; done
	@echo '----------------------------------------------------------------------'
	@echo '---------------->>> DRIVERS (DEBUG PAR) READY         <<<-------------'


release: release_multithreaded release_no_multithreaded

release_multithreaded:  $(DRIVERS_CONFIG)
	@echo '---------------->>> BUILDING DRIVERS (RELEASE PAR)    <<<-------------'
	@mkdir -p $(COMPILER)/Objects_Om
	@for i in $(DRIVERS); do make --no-print-directory -f make.drivers NAME=$$i "V=Om" "FFLAGS=$(FFO) $(OMP) -DENABLE_OPENMP" "CL=$(CLO) $(OMP)" $(COMPILER)/$$i.Om ; done 
	@echo '----------------------------------------------------------------------'
	@echo '---------------->>> DRIVERS (RELEASE PAR) READY       <<<-------------'

release_no_multithreaded:  $(DRIVERS_CONFIG)
	@echo '---------------->>> BUILDING DRIVERS (RELEASE PAR)    <<<-------------'
	@mkdir -p $(COMPILER)/Objects_O
	@for i in $(DRIVERS); do make --no-print-directory -f make.drivers NAME=$$i "V=O" "FFLAGS=$(FFO)" "CL=$(CLO)" $(COMPILER)/$$i.O ; done
	@echo '----------------------------------------------------------------------'
	@echo '---------------->>> DRIVERS (RELEASE PAR) READY       <<<-------------'

#-----------------------------------------------------------------------
# Cleaning rules
.PHONY: clean clean_all 
.PHONY: clean_debug  clean_debug_multithreaded  clean_debug_no_multithreaded  
.PHONY: clean_release  clean_release_multithreaded clean_release_no_multithreaded
.PHONY: clean_exe

clean: clean_debug

clean_all: clean_debug clean_release #newfile

clean_debug:  clean_debug_multithreaded clean_debug_no_multithreaded
clean_debug_multithreaded: $(DRIVERS_CONFIG)
	@for i in $(DRIVERS); do make --no-print-directory -f make.drivers NAME=$$i "V=gm" clean_exe; done 
clean_debug_no_multithreaded: $(DRIVERS_CONFIG)
	@for i in $(DRIVERS); do make --no-print-directory -f make.drivers NAME=$$i "V=g" clean_exe; done

clean_release: clean_release_multithreaded clean_release_no_multithreaded
clean_release_multithreaded:  $(DRIVERS_CONFIG)
	@for i in $(DRIVERS); do make --no-print-directory -f make.drivers NAME=$$i "V=Om" clean_exe; done 
clean_release_no_multithreaded:  $(DRIVERS_CONFIG)
	@for i in $(DRIVERS); do make --no-print-directory -f make.drivers NAME=$$i "V=O" clean_exe; done


clean_exe:
	@rm -f $(OFILES)
	@rm -f $(MODULES)
	@rm -f $(COMPILER)/$(NAME).$V

#-----------------------------------------------------------------------
# Config rules
#.PHONY: config config_multithreaded config_no_multithreaded newfile

#config: config_no_multithreaded config_no_multithreaded

#config_no_multithreaded: $(DRIVERS_CONFIG)

#newfile:
#	@rm -rf $(DRIVERS_CONFIG)

#=======================================================================
# GENERIC rules
#-----------------------------------------------------------------------
# Generic configuration rules
#%.obj:
#	configuref90 ${basename $@} --srcdir=$(SOURCE) --moddir=$(MODULES) --check=${basename $@} --objdir='$$O'
#%.dep:
#	configuref90 ${basename $@} --srcdir=$(SOURCE) --moddir=$(MODULES) --check=${basename $@} --objdir='$$O'

#-----------------------------------------------------------------------
# Generic executables rules
$(COMPILER)/$(NAME).g: $(OFILES) $(DEPSG)
	$(LINK) $(LFG) -o $(COMPILER)/$(NAME).g $(OFILES) $(LIBSG_SEQ) $(CL)

$(COMPILER)/$(NAME).gm: $(OFILES) $(DEPSG)
	$(LINK) $(LFG) -o $(COMPILER)/$(NAME).gm $(OFILES) $(LIBSG_THR) $(CL)

$(COMPILER)/$(NAME).O: $(OFILES) $(DEPSO)
	$(LINK) $(LFO) -o $(COMPILER)/$(NAME).O $(OFILES) $(LIBSO_SEQ) $(CL)

$(COMPILER)/$(NAME).Om: $(OFILES) $(DEPSO)
	$(LINK) $(LFO) -o $(COMPILER)/$(NAME).Om $(OFILES) $(LIBSO_THR) $(CL)

#-----------------------------------------------------------------------
# Generic objects (compilation) rules
$O/%.o: %.f90
	$(FCOMP) $(INC) $(MOD) $(FFLAGS) -o $@ $<

$O/%.o: %.f
	$(FCOMP) $(INC) $(MOD) $(FFLAGS) -o $@ $<
